from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from middleware.check_channel_and_role import check_channel_and_admin

import app.keyboards as kb
import db.commits as cm 

sell_rt = Router()


@sell_rt.callback_query(F.data == 'sell')
async def sell_start(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer(' ')

    await callback.message.answer(
f'''{callback.message.from_user.first_name}, —è —Ä–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª–∞ –æ–±–ª–µ–≥—á–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º!
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ —Å–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ, —Ç–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –¥–∞–ª–µ–µ :D''', reply_markup=kb.sell_start)
    


class Anketa(StatesGroup):
    tg_id = State()
    channel = State()
    category = State()
    cost = State()
    time = State()



@sell_rt.callback_query(F.data == 'sell_start')
async def anketa_fsm(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(Anketa.channel)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_name', reply_markup=ReplyKeyboardRemove())


@sell_rt.message(Anketa.channel)
async def error_channel_name (message: Message, state: FSMContext):
    channel_name = message.text.strip()

    
    await check_channel_and_admin(message = message, bot = message.bot, user_id = message.from_user.id, channel_name = channel_name)
    
    await state.update_data(channel = message.text)
    await state.set_state(Anketa.category)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞', reply_markup=await kb.get_cat_kb_sell())
    
    
@sell_rt.callback_query(Anketa.category, lambda c: c.data.startswith('sell_category_'))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[2])
    category_name = str(callback.data.split('_')[3])
    await state.update_data(category_id = category_id, category_name=category_name)
    await state.set_state(Anketa.cost)

    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞', reply_markup=ReplyKeyboardRemove())
    await callback.answer('')


@sell_rt.message(Anketa.cost)
async def anketa_time_fsm(message: Message, state: FSMContext):
    await state.update_data(cost = message.text)
    await state.set_state(Anketa.time)
    await message.answer(
'''–í—ã–±–µ—Ä–µ—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:

1) 1/24 (1 —á–∞—Å –≤ —Ç–æ–ø–µ, 24 —á–∞—Å–∞ –≤ –ª–µ–Ω—Ç–µ)
2) 2/48 (2 —á–∞—Å–∞ –≤ —Ç–æ–ø–µ, 48 —á–∞—Å–æ–≤ –≤ –ª–µ–Ω—Ç–µ)''', reply_markup=kb.sell_time)



@sell_rt.message(Anketa.time)
async def anketa_end(message: Message, state = FSMContext):

    
    if message.text.startswith('1/24') or message.text.startswith('2/48'):
        pass
    else:
        await message.answer('‚ö†Ô∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (1/24 –∏–ª–∏ 2/48)')
        return
    

    await state.update_data(time = message.text)
    data = await state.get_data()
    
    await message.answer(
        f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        f"üì¢ <b>–ö–∞–Ω–∞–ª</b>: {data['channel']}\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category_name']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>: {data['cost']} —Ä—É–±–ª–µ–π\n"
        f"‚è±  <b>–í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞</b>: {data['time']}\n", 
        reply_markup=kb.anketa_agree, parse_mode='HTML') 


@sell_rt.callback_query(F.data == 'anketa_agree')
async def agree(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer('‚úÖ–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.\n\n–ñ–¥–∏—Ç–µ –∑–∞–∫–∞–∑—ã!', reply_markup=kb.start)


    tg_id = callback.from_user.id
    data = await state.get_data()
    await cm.commit_date_to_db(data, tg_id)
    await state.clear()




