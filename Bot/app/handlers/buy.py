from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from app.handlers.agreement import create_post_rt
import app.payments as pay
import app.keyboards as kb
import db.requests as rq

buy_rt = Router()
buy_rt.include_router(create_post_rt)
sent_messages = {}


@buy_rt.callback_query(F.data == 'buy')
async def catalog(callback: CallbackQuery):
    await callback.message.delete()

    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await kb.get_cat_kb())


@buy_rt.callback_query(lambda c: c.data.startswith('category_'))
async def choose_category(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    category_name = await rq.get_category_name(category_id)
    channels = await rq.get_channels_by_category(category_id, 0)

    if channels:
        text = f'–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: \n\n'

        for i, ch in enumerate(channels, start = 1):
            text += f'{i}. üì¢ –ö–∞–Ω–∞–ª: {ch.channel}\n üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {ch.cost}\n ‚è±–í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {ch.time}\n\n'

        keyboard = await kb.select_page(category_id, 0, channels)
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer('')

@buy_rt.callback_query(lambda c: c.data.startswith('prev_') or c.data.startswith('next_'))
async def select_page(callback: CallbackQuery):
    data = callback.data.split('_')
    action = data[0]
    category_id = int(data[1])
    current_page = int(data[2])

    if action == 'prev':
        current_page -= 1
    elif action == 'next':
        current_page += 1


    channels = await rq.get_channels_by_category(category_id, current_page)
    category_name = await rq.get_category_name(category_id)
    if channels:
        text = f'–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:\n\n'

        for i, ch in enumerate(channels, start = 1 + current_page * 5): 
            text += f'{i}. üì¢ –ö–∞–Ω–∞–ª: {ch.channel}\n üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {ch.cost}\n ‚è±–í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {ch.time}\n\n'

        keyboard = await kb.select_page(category_id, current_page, channels)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer('')




@buy_rt.callback_query(lambda c: c.data.startswith('channel_'))
async def choose_channel(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    category_id = int(data[1]) 
    channel_page = int(data[2])
    local_index = int(data[3])%5
    
    channels = await rq.get_channels_by_category(category_id, channel_page)

    if 0 <= local_index < len(channels):
        channel = channels[local_index]
        text = f'–í–∞—à –≤—ã–±–æ—Ä:\n\n üì¢ –ö–∞–Ω–∞–ª: {channel.channel}\n\n'
        text += f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: {channel.cost}\n\n'
        text += f'‚è± –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {channel.time}\n\n'
        text += f'–ö –æ–ø–ª–∞—Ç–µ: {channel.cost}\n\n'

        await state.update_data(channel = channel.channel, cost = channel.cost, time = channel.time)
        await callback.message.answer(text, reply_markup=kb.buy_continue)   
             
    else: 
        await callback.message.answer('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

    await callback.answer('')



@buy_rt.callback_query(F.data == 'buy_continue')
async def rules(callback: CallbackQuery):
    text = '''–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã: 

1. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏ –æ–ø–ª–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–º–æ—Ä–æ–∑—è—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å—á–µ—Ç–µ.
2. –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è. 
3. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Å—Ä–æ–∫.
4. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏—Ç –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–≥–ª–∞—Å–µ–Ω"'''
    await callback.message.answer(text, reply_markup=kb.buy)



@buy_rt.callback_query(F.data == 'pay')
async def send_invoice(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    channel_name = data['channel']
    channel_cost = data['cost']
    channel_time = data['time']
    
    current_amount = int(channel_cost) * 100

    await pay.send_invoice(callback, channel_name, channel_cost, channel_time, current_amount)


@buy_rt.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok = True)


@buy_rt.message(F.successful_payment)
async def successful_payment(message: Message, bot: Bot):
    await message.answer('‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.', reply_markup=kb.create_post)


